#include <stdio.h>
#include "baseFilters.h"

const byte gCrossProcess_RColorTable[] = {
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,5,5,5,6,6,7,7,8,8,9,9,10,10,11,12,12,13,13,14,15,16,16,17,18,19,20,21,22,22,23,24,25,27,28,29,30,31,32,33,35,36,37,39,40,41,43,44,46,47,49,51,52,54,56,57,59,61,63,65,67,69,71,73,75,77,79,81,84,86,88,91,93,96,98,101,103,106,108,111,114,117,120,123,126,128,131,134,137,140,143,146,148,151,153,156,158,161,163,166,168,170,173,175,177,179,181,183,185,187,189,191,193,195,197,198,200,202,203,205,207,208,210,211,213,214,215,217,218,219,221,222,223,224,225,226,227,229,230,231,232,232,233,234,235,236,237,238,238,239,240,241,241,242,242,243,244,244,245,245,246,246,247,247,248,248,249,249,249,250,250,250,251,251,251,251,252,252,252,252,252,253,253,253,253,253,253,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,255,
};

const byte gCrossProcess_GColorTable[] = {
        0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,4,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,13,13,14,15,15,16,17,18,18,19,20,21,22,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,50,51,52,54,55,56,58,59,60,62,63,64,66,67,69,70,72,73,75,76,78,80,81,83,84,86,88,89,91,93,94,96,98,100,101,103,105,107,109,111,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,143,145,147,149,151,153,154,156,158,160,161,163,165,166,168,170,171,173,174,176,178,179,181,182,184,185,187,188,190,191,192,194,195,196,198,199,200,202,203,204,206,207,208,209,210,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,232,233,234,235,236,236,237,238,239,239,240,241,241,242,243,243,244,244,245,245,246,246,247,247,248,248,249,249,250,250,250,251,251,251,252,252,252,252,253,253,253,253,254,254,254,254,254,254,254,254,254,254,254,255,
};

const byte gCrossProcess_BColorTable[] = {
        63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,142,143,143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,154,155,155,156,156,157,157,158,158,159,159,160,160,161,161,162,162,163,163,164,164,165,165,166,166,167,167,168,168,169,169,170,170,171,171,172,172,173,173,174,174,175,175,176,176,177,177,178,178,179,179,180,180,181,181,182,182,183,183,184,184,185,185,186,186,187,187,188,188,189,189,190,190,191,
};

void negativeNew(byte *image, int width, int height, int depth, int stride) {
    register int i, j;
    register byte *pBuf;
    int r, g, b;
    int alpha1 = (int)(0.2 * 256);
    int alpha2 = (int)(0.8 * 256);

    for (j = 0; j < height; j++) {
        pBuf = image + j * stride;
        for (i = 0; i < width; i++, pBuf += depth) {
            r = PR(pBuf);
            g = PG(pBuf);
            b = PB(pBuf);
            PR(pBuf) = (r * alpha1 + *(gCrossProcess_RColorTable + r) * alpha2) >> 8;
            PG(pBuf) = (g * alpha1 + *(gCrossProcess_GColorTable + g) * alpha2) >> 8;
            PB(pBuf) = (b * alpha1 + *(gCrossProcess_BColorTable + b) * alpha2) >> 8;
        }
    }
}



void negative(unsigned char *image, int width, int height, int depth, int stride) {
    int i, j;
    unsigned char *pBuf = NULL;

    for(j = 0; j < height; j++) {
        pBuf = image + j * stride;
        for(i = 0; i < width; i++, pBuf += depth) {
            PR(pBuf) = 255 - PR(pBuf);
            PG(pBuf) = 255 - PG(pBuf);
            PB(pBuf) = 255 - PB(pBuf);
        }
    }
}
