#include "mz_filter_multiply.h"

static const byte	gMultiplyFilter_Curve_ColorTable[] = {
	0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,33,35,37,39,41,43,45, 47, 49, 51, 53, 55, 57, 58, 60, 62, 64,66, 68, 69, 71, 73, 75, 76, 78, 80, 82, 83, 85, 87, 88, 90, 91, 93, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 109, 111, 112, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 127,128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140,142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153,154, 155, 156, 157, 157, 158, 159, 160, 161, 162, 163, 164,165, 165, 166, 167, 168, 169, 169, 170, 171, 172, 173, 173,174, 175, 176, 176, 177, 178, 179, 179, 180, 181, 181, 182,183, 183, 184, 185, 185, 186, 187, 187, 188, 189, 189, 190,191, 191, 192, 193, 193, 194, 194, 195, 196, 196, 197, 197,198, 199, 199, 200, 200, 201, 202, 202, 203, 203, 204, 204,205, 206, 206, 207, 207, 208, 209, 209, 210, 210, 211, 211,212, 213, 213, 214, 214, 215, 216, 216, 217, 217, 218,219,219, 220, 220, 221, 221, 222, 223, 223, 224, 224, 225, 226,226, 227, 227, 228, 229, 229, 230, 230, 231, 232, 232, 233,233, 234, 234, 235, 236, 236, 237, 237, 238, 239, 239, 240,240, 241, 242, 242, 243, 243, 244, 244, 245, 246, 246, 247,247, 248, 249, 249, 250, 250, 251, 252, 252, 253, 253, 254, 255, 
};


static const byte	gMultiplyFilter_ColorRTable[] = {
	0,0,1,1,2,3,3,4,5,5,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,16,16,17,18,19,19,20,21,22,22,23,24,24,25,26,26,27,28,29,29,30,31,32,33,33,34,35,36,37,38,38,39,40,41,42,43,44,44,45,46,47,48,49,50,51,52,53,54,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,78,79,80,81,83,84,85,86,88,89,90,92,93,94,96,97,98,100,101,103,104,106,107,109,110,112,113,115,116,118,120,121,123,125,126,128,130,131,133,135,136,138,139,141,142,144,145,147,149,150,152,153,155,156,157,159,160,161,163,164,165,167,168,169,171,172,173,174,175,177,178,179,180,181,183,184,185,186,187,188,190,191,192,193,194,195,196,197,198,199,200,201,201,202,203,204,205,206,207,208,209,210,211,212,212,213,214,215,216,217,218,218,219,220,221,222,223,223,224,225,226,226,227,228,229,229,230,231,231,232,233,234,234,235,236,236,237,238,239,239,240,241,241,242,243,243,244,244,245,246,246,247,248,248,249,250,250,251,252,252,253,254,
};

static const byte	gMultiplyFilter_ColorGTable[] = {
	0,0,1,1,2,3,3,4,4,5,6,6,7,8,8,9,9,10,11,12,12,13,14,14,15,16,17,17,18,19,19,20,21,22,22,23,24,25,26,27,27,28,29,29,30,31,32,33,34,34,35,36,37,38,39,40,40,41,42,43,44,45,46,47,48,48,49,50,51,52,53,54,55,56,57,58,59,60,61,61,62,64,65,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,107,108,109,110,111,112,114,115,116,117,118,120,121,122,124,125,126,128,128,129,131,132,133,135,136,137,138,139,141,142,143,144,145,146,148,149,150,151,152,154,155,156,157,158,160,160,161,162,164,165,166,167,168,169,170,171,173,174,175,175,177,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,199,200,201,202,203,204,205,206,207,208,209,210,211,212,212,213,214,215,216,217,217,218,219,220,221,222,223,223,224,225,226,226,227,228,229,229,230,231,232,232,233,234,235,236,237,237,238,238,239,240,240,241,
};

static const byte	gMultiplyFilter_ColorBTable[] = {
	22,22,23,24,25,25,26,27,28,28,29,30,30,31,32,33,33,34,35,35,36,37,38,38,39,40,41,41,42,43,43,44,45,46,46,47,48,48,49,50,51,51,52,53,54,54,55,56,57,58,58,59,60,61,61,62,63,63,64,65,66,66,67,68,68,69,70,71,71,72,73,73,74,75,76,76,77,78,79,79,80,81,81,82,83,84,84,85,86,87,87,88,89,90,90,91,92,93,93,94,95,96,96,97,98,99,99,100,101,101,102,103,104,104,105,106,106,107,108,109,109,110,111,112,112,113,114,114,115,116,117,117,118,119,119,120,121,122,122,123,124,125,125,126,127,128,128,129,130,131,131,132,133,134,134,135,136,137,137,138,139,139,140,141,142,142,143,144,145,145,146,147,147,148,149,150,150,151,152,152,153,154,155,155,156,157,158,158,159,160,161,161,162,163,164,164,165,166,167,167,168,169,170,170,171,172,172,173,174,175,175,176,177,177,178,179,180,180,181,182,183,183,184,185,185,186,187,188,188,189,190,190,191,192,193,193,194,195,196,196,197,198,199,199,200,201,202,202,203,204,205,205,206,207,208,208,
};

void		mz_filterMultiply(byte* yuv, int width, int height)
{
	register int i = height, j = 0;
	register byte* dp = yuv;
	register int y1 = 0, u1 = 0, v1 = 0, y2 = 0, u2 = 0, v2 = 0;
	register int r = 0, g = 0, b = 0;
	int cx = width / 2, cy = height / 2, maxDistance = 2 * cx * cy;
	int distance = 0, gray = 0;
	int s = 102892;
	while (i--) {
		j = cx;
		while (j--) {
			y1 = YUYV_PY1(dp);
			u1 = u2 = YUYV_PU(dp);
			y2 = YUYV_PY2(dp);
			v1 = v2 = YUYV_PV(dp);

			r = *(gYUV2RGB_YTable + y1) + *(gYUV2R_VTable + v1);
			g = *(gYUV2RGB_YTable + y1) - *(gYUV2G_VTable + v1) - *(gYUV2G_UTable + u1);
			b = *(gYUV2RGB_YTable + y1) + *(gYUV2B_UTable + u1);

			r = Clamp(r);
			g = Clamp(g);
			b = Clamp(b);

			distance = (j - cx) * (j - cx) + (i - cy) * (i - cy);
			distance = distance * 154 / maxDistance;

			r = *(gMultiplyFilter_ColorRTable + r);
			g = *(gMultiplyFilter_ColorGTable + g);
			b = *(gMultiplyFilter_ColorBTable + b);

			r = Clamp(r - distance);
			g = Clamp(g - distance);
			b = Clamp(b - distance);

			r = *(gMultiplyFilter_Curve_ColorTable + r);
			g = *(gMultiplyFilter_Curve_ColorTable + g);
			b = *(gMultiplyFilter_Curve_ColorTable + b);

			y1 = *(gRGB2Y_RTable + r) + *(gRGB2Y_GTable + g) + *(gRGB2Y_BTable + b) + 16;
			u1 = *(gRGB2U_RTable + r) + *(gRGB2U_GTable + g) + *(gRGB2U_BTable + b) + 128;
			v1 = *(gRGB2V_RTable + r) + *(gRGB2V_GTable + g) + *(gRGB2V_BTable + b) + 128;

			// -------------------------------

			r = *(gYUV2RGB_YTable + y2) + *(gYUV2R_VTable + v2);
			g = *(gYUV2RGB_YTable + y2) - *(gYUV2G_VTable + v2) - *(gYUV2G_UTable + u2);
			b = *(gYUV2RGB_YTable + y2) + *(gYUV2B_UTable + u2);

			r = Clamp(r);
			g = Clamp(g);
			b = Clamp(b);

			r = *(gMultiplyFilter_ColorRTable + r);
			g = *(gMultiplyFilter_ColorGTable + g);
			b = *(gMultiplyFilter_ColorBTable + b);

			r = Clamp(r - distance);
			g = Clamp(g - distance);
			b = Clamp(b - distance);

			r = *(gMultiplyFilter_Curve_ColorTable + r);
			g = *(gMultiplyFilter_Curve_ColorTable + g);
			b = *(gMultiplyFilter_Curve_ColorTable + b);

			y2 = *(gRGB2Y_RTable + r) + *(gRGB2Y_GTable + g) + *(gRGB2Y_BTable + b) + 16;
			u2 = *(gRGB2U_RTable + r) + *(gRGB2U_GTable + g) + *(gRGB2U_BTable + b) + 128;
			v2 = *(gRGB2V_RTable + r) + *(gRGB2V_GTable + g) + *(gRGB2V_BTable + b) + 128;

			YUYV_PY1(dp) = y1;
			YUYV_PY2(dp) = y2;
			YUYV_PU(dp) = ((u1 + u2) >> 1);
			YUYV_PV(dp) = ((v1 + v2) >> 1);
			dp += 4;
		}
	}

}

void		mz_imageFilterMultiply(byte* image, int width, int height, int depth) {
	register int i = height, j = 0;
	register byte* dp = image;
	register int r = 0, g = 0, b = 0;
	int cx = width / 2, cy = height / 2, maxDistance = 2 * cx * cy;
	int distance = 0, gray = 0;
	int s = 102892;
	while (i--) {
		j = width;
		while (j--) {
			distance = (j - cx) * (j - cx) + (i - cy) * (i - cy);
			distance = distance * 154 / maxDistance;

			r = *(gMultiplyFilter_ColorRTable + RGB_PR(dp));
			g = *(gMultiplyFilter_ColorGTable + RGB_PG(dp));
			b = *(gMultiplyFilter_ColorBTable + RGB_PB(dp));

			r = Clamp(r - distance);
			g = Clamp(g - distance);
			b = Clamp(b - distance);

			RGB_PR(dp) = *(gMultiplyFilter_Curve_ColorTable + r);
			RGB_PG(dp) = *(gMultiplyFilter_Curve_ColorTable + g);
			RGB_PB(dp) = *(gMultiplyFilter_Curve_ColorTable + b);

			dp += depth;
		}
	}
}