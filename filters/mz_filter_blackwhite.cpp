#include "mz_filter_blackwhite.h"

static const int gFilterBlackWhite_RGBTable[] = {
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,9,11,12,13,14,15,16,17,18,21,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49,51,53,54,55,56,57,58,59,61,62,64,65,66,67,68,69,71,72,73,75,76,77,78,79,81,82,83,84,86,87,88,89,91,92,93,94,95,97,98,99,101,102,103,104,105,106,108,109,111,112,113,114,115,116,117,119,121,122,123,124,125,126,127,128,131,132,133,134,135,136,137,138,139,142,143,144,145,146,147,148,149,151,153,154,155,156,157,158,159,161,162,164,165,166,167,168,169,171,172,173,175,176,177,178,179,181,182,183,184,186,187,188,189,191,192,193,194,195,197,198,199,201,202,203,204,205,206,208,209,211,212,213,214,215,216,217,219,221,222,223,224,225,226,227,228,231,232,233,234,235,236,237,238,239,242,243,244,245,246,247,248,249,251,253,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
};

void		mz_filterBlackWhite(byte* yuv, int width, int height) 
{
	register int i = width * height / 2;
	register int r = 0, g = 0, b = 0;
	register int y1 = 0, u1 = 0, v1 = 0, y2 = 0, u2 = 0, v2 = 0;
	register byte* dp = yuv;
	int max = 0;
	while (i--) {
		y1 = YUYV_PY1(dp);
		y2 = YUYV_PY2(dp);

		r = g = b = *(gFilterBlackWhite_RGBTable + y1);

		y1 = *(gRGB2Y_RTable + r) + *(gRGB2Y_GTable + g) + *(gRGB2Y_BTable + b) + 16;
		u1 = *(gRGB2U_RTable + r) + *(gRGB2U_GTable + g) + *(gRGB2U_BTable + b) + 128;
		v1 = *(gRGB2V_RTable + r) + *(gRGB2V_GTable + g) + *(gRGB2V_BTable + b) + 128;

		// -------------------------------

		r = g = b = *(gFilterBlackWhite_RGBTable + y2);

		y2 = *(gRGB2Y_RTable + r) + *(gRGB2Y_GTable + g) + *(gRGB2Y_BTable + b) + 16;
		u2 = *(gRGB2U_RTable + r) + *(gRGB2U_GTable + g) + *(gRGB2U_BTable + b) + 128;
		v2 = *(gRGB2V_RTable + r) + *(gRGB2V_GTable + g) + *(gRGB2V_BTable + b) + 128;

		YUYV_PY1(dp) = y1;
		YUYV_PY2(dp) = y2;
		YUYV_PU(dp) = ((u1 + u2) >> 1);
		YUYV_PV(dp) = ((v1 + v2) >> 1);
		dp += 4;
	}
}
